2.2-1
Express the function n^2/1000 - 100n^2 - 100n + 3 in terms of O-notation.

O(n^2)

2.2-2
Consider sorting n numbers stored in array A by first finding the smallest element of A and exchanging it with the element in A[1].  Then find the second smallest element of A, and exchange it with A[2].  Continue in this manner for the first n-1 elements of A.  Write pseudocode for this algorithm, which is known as selection sort.  What loop invariant does this algorithm maintain?  Why does it need to run for only the first n-1 elements, rather than for all n elements?  Give the best-case and worst-case running times of selection sort in O-notation.

Selection-Sort(A)
1    for j = 1 to A.length - 1
2        min = j
3        for i = j to A.length
4            if A[i] < A[j]
5                min = j
6        // Swap the numbers
7        t1 = A[j]
8        A[j] = A[min]
9        A[min] = t1

Loop invariant: The subset A[1..j] is ordered from least to greatest

Initialization: The initial subset A[1..1] is one token only, and therefore trivially sorted.

Maintenance: As j increments, the minimum of the subset A[j..A.length] is found, and swapped with A[j].  This guarantees that before and after each iteration, the subset A[1..j] will be ordered least to greatest.

Termination: The guard condition ends when j = A.length - 1.  By the loop invariant, this means the subset A[1..A.length-1] is sorted.  Because every minimum was swapped into place on the subset A[1..A.length-1], the last element is the greater than or equal to all other elements.  Thus, the array is ordered from least to greatest.

Best case:  O(n^2)

Worst case:  O(n^2)

2.2-3
Consider linear search again (see Exercise 2.1-3).  How many elements of the input sequence need to be checked on the average, assuming that the element being searched for is equally likely to be any element in the array?  How about in the worst case?  What are the average-case and worst-case running times of linear search in O-notation?  Justify your answers.

On average, the search will have to check n/2 elements.  In this case, the assumption is that each probability of the searched key being each element is equal to each other, and has a sum of one.

The worst case is that the searched key is not in the array; to confirm this, the search algorithm will have to compare all n elements to the key.

Thus, the average-case and worst-case of linear search is O(n), since we drop any leading constants and lower order terms in O-notation.


2.2-4
How can we modify almost any algorithm to have a good best-case running time?

To guarantee an O(n) best-case running time, simply check if the input data already follows the criteria you want.  Note, not all algorithms can be optimized this way - the optimal answer to the traveling salesman problem is hard to verify, even if you already have a possible answer.

This is contrasted with a notable set of problems that are easy to check but hard to compute, as sometimes used in cryptography.