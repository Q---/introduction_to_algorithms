2.3-1
Using Figure 2.4 as a model, illustrate the operation of merge sort on the array A = {3, 41, 52, 26, 38, 57, 9, 49}.

3
    3 41
41
            3 26 41 52
52
    26 52
26
                        3 9 26 38 41 49 52 57
38
    38 57
57
            9 38 49 57
9
    9 49
49

2.3-2
Rewrite the MERGE procedure so it does not use sentinels, instead stopping once either L or R has had all its elements copied back to A, and then copying the remainder of the other array back into A.

MERGE(A, p, q, r)
    n_1 = q - p + 1
    n_2 = r - q
    let L[1..n_1 + 1] and R[1..n_2 + 1] be new arrays
    for i = 1 to n_1
        L[i] = A[p + i - 1]
    for j = 1 to n_2
        R[j] = A[q + j]
    i = 1
    j = 1
    for k = p to r and i < n_1 and j < n_2
        if L[i] <= R[j]
            A[k] = L[i]
            i = i + 1
        else A[k] = R[j]
            j = j + 1
    if i != n_1
        for k to r
            A[k] = L[i]
            i = i + 1
    elseif j != n_2
	for k to r
            A[k] = R[j]
            j = j + 1

2.3-3
Use mathematical induction to show that when n is an exact power of 2, the solution of the recurrence:
T(n) = 2 if n=2; 2T(n/2)+n if n=2^k, for k > 1
is T(n) = nlg(n)

For the proof, see the corresponding image file

2.3-4
We can express insertion sort as a recursive procedure as follows.  In order to sort A[1 .. n], we recursively sort A[1 .. n-1] and then insert A[n] into the sorted array A[1 .. n-1].  Write a recurrence for the running time of this recursive version of insertion sort.

The recurrence is

       { 1           if n = 1
T(n) = {
       { T(n-1) + n  if n > 1

The solution to this recurrence is n(n+1)/2, leading to O(n^2) time complexity.

For the proof, see the corresponding image file.

Pseudocode for recursive insertion sort (modeled as two functions):

// Recursively sorts subarray A[1 .. n], O(n^2)
insertSort(A, n)
1    if n > 1
2        insertSort(A, n-1)
3        insert(A, n)

// Inserts A[n] into place on sorted subarray A[1 .. n-1], O(n)
insert(A, n)
1    A_n = A[n]
2    i = n - 1
3    while i > 0 and A[i] > A_n
4        A[i + 1] = A[i]
5        i = i - 1
6    A[i + 1] = A_n

2.3-5
Referring back to the searching problem (see Exercise 2.1-3), observe that if the sequence A is sorted, we can check the midpoint of the sequence against v and eliminate half of the sequence from further consideration.  The binary search algorithm repeats this procedure, halving the size of the remaining portion of the sequence each time.  Write pseudocode, either iterative or recursive, for binary search.  Argue that the worst-case running time of binary search is O(lg n).

binarySearch(A, key, p, r)
1    if p < r
2        q = floor((p+r)/2)
3        if A[q] < key
4            return binarySearch(A, key, p, q-1)
5        else if A[q] > key
6            return binarySearch(A, key, q, r)
7        else return q
8    else return NIL

Divide: Dividing (in this case, spawn one subproblem) the problem consists of a constant number of comparisons, so this contributes O(1)

Conquer: The problem becomes half the size of the original, contributing T(n/2) time cost on each recurse.

Combine: Determining if the current index has the key is constant time, so O(1)

Therefore,

       { 1           if n = 2
T(n) = { 
       { T(n/2) + 1  if n = {2^k | k is in Z+}

Which is equivalent to ln n

For the proof, see the corresponding image file.

2.3-6
Observe that the while loop of lines 5-7 of the insertion-sort procedure in Section 2.1 uses a linear search to scan (backward) through the sorted subarray A[1..j-1].  Can we use a binary search (see Exercise 2.3-5) instead to improve the overall worst-case running time of insertion sort to O(n lg n)?

On an array, insertion of an element usually takes O(n) time, because it has to move all of the higher elements to make space for the new one.  If we are primarily concerned with the array data type, then no.

However, I'm not fully satisfied with that answer.  With linked lists, insertion is possible in O(1) time.  However, then the problem becomes that of efficient traversal of linked lists; unlike arrays, accessing the nth element of a linked list is O(n).  The vanilla interpretation of linked lists is out.

What if we had an as-yet-unknown data type that had O(1) element insertion, and O(1) access time?  In that case, the time-analysis is as follows:

Divide: Simplifying into sorting A[1..j-1] takes O(1)
Conquer: In a recursive case (which is simpler to analyze here), the conquer-step will contribute T(n-1) complexity.
Combine: Each binary search of where to insert the current element contributes lg n to the time complexity

Thus, the recurrence relation is as follows:

Binary insertion sort:
       { C_1                  if n = 1
T(n) = {
       { T(n-1) + lg n + C_2  if n > 1

It is easy to see that this will equal something like lg(n)+lg(n-1)+lg(n-2)+lg(n-3)...  By the property of logarthims, this is around lg(n!)+1

(for the better proof, and more analysis, see the image file)

Despite the scary-looking factorial, lg(n!) is actually a lower order of growth than both n^2 and n lg n.  See the second image file for a graphical plot of the time complexities.

Since the lower bound on comparison-based sorts in n lg n, I consider this a proof that there are no data structures that have O(1) insertion and indexing. (Except for prohibitively space-expensive ones)

2.3-7
Describe a O(n lg n)-time algorithm that, given a set S of n integers and another integer x, determines whether or not there exist two elements in S whose sum is exactly x.

Vaguely,
1. Use merge sort on A... O(n lg n)
2. For each n, use binary search to find {m | n+m = x}... O(n lg n)

Given previous definitions of merge sort and binary search:

Set-Sum-Finder(S, x)
1    mergeSort(S)
2    for n = 1 to S.length
3        i = binarySearch(S, x-n, 0, length)
4        if i != NIL and i != n
5            return true
6    return false

Note: The accuracy of this definition depends upon the property of the set data type of no repeated elements.  A version for an array would require minor modification of the binary search algorithm.

The "i != n" condition disallows the algorithm to use the same element twice, but binary search will only return the first found index.  Thus, if there are elements of the same value, a particularly unlucky execution might miss pairs.

I expect this is why the question specified 'set', instead of 'array'.  If an array was required, and you wanted to use unmodified binary search, you could convert an ordered array to a set in O(n) time.